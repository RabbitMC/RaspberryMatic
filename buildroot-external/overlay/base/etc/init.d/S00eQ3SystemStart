#!/bin/sh
#
# set System Start Led Signal
#

CFG_TEMPLATE_DIR=/etc/config_templates

# function to identify the host system used
identify_host() {

  # default/fallback values
  HOST=""
  HM_MODE="HmIP"
  UART_DEV=""
  UART_BASE=""
  UART_IRQ=""

  # identify the RaspberryPi version used
  # (see http://elinux.org/RPi_HardwareHistory)
  hostid=$(cat /proc/cpuinfo | grep 'Revision' | awk '{print $3}')
  case ${hostid} in
    *a02082|*a22082|*a32082)         HOST="rpi3"       ;; # Raspberry Pi 3 Model B
    *a020a0)                         HOST="rpi3cm"     ;; # Raspberry Pi Compute Module 3
    *a01040|*a01041|*a21041|*a22042) HOST="rpi2"       ;; # Raspberry Pi 2 Model B
    *9000c1)                         HOST="rpi0w"      ;; # Raspberry Pi Zero W
    *900092|*900093|*920093)         HOST="rpi0"       ;; # Raspberry Pi Zero
    *0011|*0014)                     HOST="rpi1cm"     ;; # Raspberry Pi Compute Module 1
    *0010|*0013|*900032)             HOST="rpi1bp"     ;; # Raspberry Pi B+
    *0015|*900021)                   HOST="rpi1ap512"  ;; # Raspberry Pi A+/512MB
    *0012)                           HOST="rpi1ap256"  ;; # Raspberry Pi A+/256MB
    *000d|*000e|*000f)               HOST="rpi1b512"   ;; # Raspberry Pi B/512MB
    *0002|*0003|*0004|*0005|*0006)   HOST="rpi1b256"   ;; # Raspberry Pi B/256MB
    *0007|*0008|*0009)               HOST="rpi1a"      ;; # Raspberry Pi A
  esac

  # depending on the host hardware we choose a different
  # uart base address and irq
  case ${HOST} in

    # RaspberryPi3 / RaspberryPi2
    rpi3*|rpi2*)
      if [[ -z ${UART_BASE} ]]; then
        UART_BASE="0x3f201000"
      fi
      if [[ -z ${UART_IRQ} ]]; then
        UART_IRQ="87"
      fi
    ;;

    # RaspberryPi 1 and Zero (W)
    rpi1*|rpi0*)
      if [[ -z ${UART_BASE} ]]; then
        UART_BASE="0x20201000"
      fi
      if [[ -z ${UART_IRQ} ]]; then
        UART_IRQ="81"
      fi
    ;;

    *)
      echo "ERROR: couldn't identify host hardware: ${hostid}"
    ;;

  esac

  # depending on HM mode we define a different uart device
  if [[ -z ${UART_DEV} ]]; then
    if [[ ${HM_MODE} == "HmIP" ]]; then
      UART_DEV="/dev/bcm2835-raw-uart"
    else
      UART_DEV="/dev/ttyAMA0"
    fi
  fi
}

# function to check if a factory reset (clearing whole /usr/local) should be performed
# in addition we also resize /usr/local in case it hasn't been resized to SD card
# boundaries
checkFactoryReset() {

  # get id and node of the root device
  DEVID=$(mountpoint -d / | cut -d':' -f1)
  ROOTPARTDEV=$(mountpoint -n / | cut -d' ' -f1)

  # check if /usr/local (partition4) exists (then rootfs2 and userfs exists as well)
  if [[ -e /sys/dev/block/${DEVID}:4 ]]; then

    # check if it is mounted
    if mount | grep -q /usr/local; then
      # wipe whole /usr/local if .doFactoryReset exists
      if [[ -r /usr/local/.doFactoryReset ]]; then
        # umount /usr/local to regenerate it
        umount -f /usr/local

        # we create a clean ext4 userfs partition
        mkfs.ext4 -F -L userfs "${ROOTPARTDEV%?}4"
        tune2fs -c 0 -i 0 "${ROOTPARTDEV%?}4"
        e2fsck -pDf "${ROOTPARTDEV%?}4"

        # mount /usr/local again
        mount /usr/local
      fi
    fi

  else

    # if we end up here we have a completly fresh installed
    # image and thus we have to create rootfs2 and userfs from scratch
    DEV="/dev/$(readlink /sys/dev/block/${DEVID}:0 | awk -F/ '{print $(NF)}')"

    ###############
    # 1. check if rootfs2 (partition 3) exists and if not we create it using 'parted'
    if [[ ! -e /sys/dev/block/${DEVID}:3 ]]; then
      # now we read out the partition size of the main rootfs1
      END_B=$(parted -s ${DEV} unit b print | grep "^ 2" | awk '{print $3}' | cut -d'B' -f1)
      SIZE_B=$(parted -s ${DEV} unit b print | grep "^ 2" | awk '{print $4}' | cut -d'B' -f1)

      # create partition 3 with the same size like partition 2
      parted -s ${DEV} mkpart primary "$((END_B+1))B" "$((END_B+1 + SIZE_B))B"

      # we create a clean ext4 rootfs2 partition with same filesystem features
      NUM_INODES=$(tune2fs -l ${ROOTPARTDEV}  | grep "Inode count:" | awk '{ print $3 }')
      FS_FEATURE=$(tune2fs -l ${ROOTPARTDEV}  | grep "Filesystem features:" | awk '{ print substr($0, index($0,$3)) }' | tr ' ' ',')
      mkfs.ext2 -F -L rootfs2 -N ${NUM_INODES} "${ROOTPARTDEV%?}3"
      tune2fs -j -J size=1 -c 0 -i 0 -o ^acl,^user_xattr -O ${FS_FEATURE} "${ROOTPARTDEV%?}3"
      e2fsck -pDf "${ROOTPARTDEV%?}3"
    fi

    ###############
    # 2. check if userfs (partition 4) exists and if not we create it using 'parted'
    if [[ ! -e /sys/dev/block/${DEVID}:4 ]]; then
      # now we read out the partition size of rootfs2
      END_B=$(parted -s ${DEV} unit b print | grep "^ 3" | awk '{print $3}' | cut -d'B' -f1)
      MAX_B=$(parted -s ${DEV} unit b print | grep "Disk ${DEV}:" | cut -d' ' -f3 | cut -d'B' -f1)

      # create partition 4 as large as the whole rest of the device
      parted -s ${DEV} mkpart primary "$((END_B+1))B" "$((MAX_B-1))B"

      # we create a clean ext4 userfs partition
      mkfs.ext4 -F -L userfs "${ROOTPARTDEV%?}4"
      tune2fs -c 0 -i 0 "${ROOTPARTDEV%?}4"
      e2fsck -pDf "${ROOTPARTDEV%?}4"

      # mount /usr/local again
      mount /usr/local
    fi

    ###############
    # 3. the partition table was changed and we have to find out
    #    the new disk identifier and modify the /boot/cmdline.txt file accordingly.
    disk_identifier=$(dd if=${DEV} bs=1 count=4 conv=notrunc skip=$((0x1B8)) 2>/dev/null | hexdump -e '"%08x"')
    if [[ -n ${disk_identifier} && -f /boot/cmdline.txt ]]; then
      mount -o rw,remount /boot
      ROOTPARTNUM=$(mountpoint -d / | cut -d':' -f2)
      sed -i "s/ root=[^[:space:]]*/ root=PARTUUID=${disk_identifier}-$(printf '%02d' ${ROOTPARTNUM})/" /boot/cmdline.txt
      mount -o ro,remount /boot
    fi

  fi
}

# function to check if a backup should be restored that had been placed in /usr/local/tmp
# in addition to /usr/local/.doBackupRestore being present and empty
checkBackupRestore() {

  # only continue if .doBackupRestore file exists
  if [[ ! -r /usr/local/.doBackupRestore ]]; then
    return
  fi

  if [[ -f /usr/local/tmp/usr_local.tar.gz ]]; then
    # now remove the whole /usr/local, but keep /usr/local/tmp
    find /usr/local -not -name tmp -not -name "lost+found" -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

    # unarchive the backup archive to restore everything
    tar -C / -xf /usr/local/tmp/usr_local.tar.gz

    # make sure everything is written to disk
    sync
  fi

  rm -f /usr/local/.doBackupRestore
}

# initialize a potentially existing RTC clock
init_rtc_device() {

  # only continue if we don't have a valid rtc yet
  [[ -e /dev/rtc0 ]] && return 0

  # load the common i2c kernel modules
  modprobe i2c_bcm2835
  modprobe i2c_dev

  # check for MCP7940N RTC clock at 0x6f (PiFace Shim RTC)
  i2cget -y 1 0x6f 0x00 2>/dev/null >/dev/null
  if [[ $? -eq 0 ]]; then
    # calibrate MCP7940N
    i2cset -y 1 0x6f 0x08 0x47 2>/dev/null >/dev/null
    if [[ $? -eq 0 ]]; then
      modprobe i2c:mcp7941x
      echo mcp7941x 0x6f >/sys/class/i2c-dev/i2c-1/device/new_device
      [[ -e /dev/rtc0 ]] && return 0
      echo 0x6f >/sys/class/i2c-dev/i2c-1/device/delete_device
    fi
  fi

  # check for DS3231/DS1307 RTC clock at 0x68
  i2cget -y 1 0x68 0x00 2>/dev/null >/dev/null
  if [[ $? -eq 0 ]]; then
    # check for DS3231
    modprobe i2c:ds3231
    [[ -e /dev/rtc0 ]] && return 0
    echo ds3231 0x68 >/sys/class/i2c-adapter/i2c-1/new_device
    [[ -e /dev/rtc0 ]] && return 0
    echo 0x68 >/sys/class/i2c-dev/i2c-1/device/delete_device

    # check for DS1307
    modprobe i2c:ds1307
    [[ -e /dev/rtc0 ]] && return 0
    echo ds1307 0x68 >/sys/class/i2c-adapter/i2c-1/new_device
    [[ -e /dev/rtc0 ]] && return 0
    echo 0x68 >/sys/class/i2c-dev/i2c-1/device/delete_device
  fi

  return 1
}

# we have to initialize /dev/urandom way earlier than the system usually
# does via S20urandom.
init_urandom() {
  if [[ ! -c /dev/urandom ]]; then
    return
  fi

  if [[ -s /etc/config/random-seed ]]; then
    cat /etc/config/random-seed >/dev/urandom
  else
    # initialize urandom with /proc/timer_list
    head -3 /proc/timer_list | tail -1 | cut -d' ' -f3 >/dev/urandom
  fi
}

# we save the random-seed pool so that we can immediately reuse it
# after a reboot
save_urandom() {
  if [[ ! -c /dev/urandom ]]; then
    return
  fi

  dd if=/dev/urandom of=/etc/config/random-seed count=1 bs=512 2>/dev/null
}

# function to update the crontab file and
# make sure that it is up to date
update_crontab() {
  NUM_TEMPLATE=$(wc -l $CFG_TEMPLATE_DIR/crontab.root | cut -d' ' -f1)
  NUM_USR=$(grep -Ff $CFG_TEMPLATE_DIR/crontab.root /usr/local/crontabs/root 2>/dev/null | wc -l | cut -d' ' -f1)

  # if NUM_USR is not equal to NUM_TEMPLATE we have to
  # update the usr crontab file
  if [[ ${NUM_USR} -ne ${NUM_TEMPLATE} ]]; then
    # add the standard commands from our template
    cat $CFG_TEMPLATE_DIR/crontab.root >/tmp/crontab.root

    # put all lines not matching setHWClock and SetInterfaceClock
    # to the temporary crontab.root file
    grep -viE "/bin/setHWClock.sh|/bin/SetInterfaceClock|/usr/sbin/logrotate" /usr/local/crontabs/root 2>/dev/null >>/tmp/crontab.root

    # make the temp crontab the new usr crontab
    mv /tmp/crontab.root /usr/local/crontabs/root
  fi
}

init() {

  # identify the host
  identify_host

  # init a potentially existing rtc clock
  init_rtc_device
  if [[ -e /dev/rtc0 ]]; then
    hwclock --hctosys --utc
  fi

  # init /dev/urandom
  init_urandom

  # load watchdog kernel module
  modprobe bcm2835_wdt nowayout=1 heartbeat=15

  # load tunneling interface support
  modprobe tun

  # if /dev/ttyS0 is present move it to ttyS1 for
  # potentiall later use (e.g. bluetooth)
  if [[ -c /dev/ttyS0 ]]; then
    mv /dev/ttyS0 /dev/ttyS1
  fi

  # check if a factory reset should be performed
  checkFactoryReset

  # check if we should restore a backup now
  checkBackupRestore

  # check if we should boot in LAN gateway mode
  if [[ -e /usr/local/HMLGW ]]; then
    HM_MODE="HMLGW"
    UART_DEV="/dev/ttyAMA0"
  fi

  # save all mode information
  echo "HOST=${HOST}" >/var/hm_mode
  echo "HM_MODE=${HM_MODE}" >>/var/hm_mode
  echo "UART_DEV=${UART_DEV}" >>/var/hm_mode

  # depending on the HomeMatic mode (HmRF, HmIP) we
  # have to load different kernel modules.
  if [[ ${HM_MODE} == "HmIP" ]]; then
    # HM/HmIP Dual Protocol
    modprobe bcm2835_raw_uart uart0_base=${UART_BASE} uart0_irq=${UART_IRQ}
    modprobe eq3_char_loop
  else
    # use standard PL011 UART
    modprobe amba-pl011
  fi

  # make sure to save the urandom pool for future reboots
  save_urandom

  RF_SERIAL=$(/bin/eq3configcmd update-coprocessor -p ${UART_DEV} -t HM-MOD-UART -c -se 2>&1 | grep "SerialNumber:" | cut -d' ' -f5)
  echo "${RF_SERIAL}" >/var/board_serial
  RF_VERSION=$(/bin/eq3configcmd update-coprocessor -p ${UART_DEV} -t HM-MOD-UART -c -v 2>&1 | grep "Version:" | cut -d' ' -f5)
  echo "${RF_VERSION}" >/var/rf_firmware_version
  RF_ADDRESS=$(/bin/eq3configcmd read-default-rf-address -f ${UART_DEV} -h 2>&1 | grep "^0x")
  echo "${RF_ADDRESS}" >/var/rf_address

        # cal local init startup file
        if [ ! -e /etc/config/safemode ] ; then
        	if [ -x /usr/local/etc/rc.init ]; then
                	/usr/local/etc/rc.init
        	fi
	fi

	# ToDo GPIO / LED Ports  blink
	echo "18" > /sys/class/gpio/export
	echo "out" > /sys/class/gpio/gpio18/direction
        chmod 775 /var
        mkdir /var/log
        chmod 775 /var/log
        mkdir /var/tmp
        chmod 775 /var/tmp
        mkdir /var/rega
        chmod 775 /var/rega
        mkdir /var/run
        chmod 775 /var/run
        mkdir /var/spool
        chmod 775 /var/spool
        mkdir /var/lock
        chmod 775 /var/lock
        mkdir /var/cache
        chmod 775 /var/cache
        mkdir /var/lib
        chmod 775 /var/lib
        mkdir /var/lib/misc
        chmod 775 /var/lib/misc
        mkdir /var/lib/dbus
        chmod 775 /var/lib/dbus
        mkdir /var/empty
        chmod 600 /var/empty
        mkdir /var/etc
        chmod 775 /var/etc
        mkdir /var/status
	# HMServer measurement
        chmod 775 /var/status
	touch /var/status/SDinitialised
	mkdir -p /usr/local/sdcard/measurement
	mkdir -p /media/sd-mmcblk0
	ln -sf /usr/local/sdcard/measurement /media/sd-mmcblk0/measurement
  for i in $(seq 0 7); do
    mkdir -p /media/usb${i}
  done

  # SSH dir setup (/root/.ssh is linked to /usr/local/etc/ssh)
  mkdir -p /usr/local/etc/ssh

  # create a /usr/local/tmp directory for creating things like backup files, etc.
  # (we need it on-disk or /tmp will be not enough in case of a filled up /usr/local)
  mkdir -p /usr/local/tmp
  rm -rf /usr/local/tmp/*

	# crontab dirs
  if [ ! -d /usr/local/crontabs ] ; then
    mkdir -p /usr/local/crontabs
    chmod 775 /usr/local/crontabs
  fi
  update_crontab
  mkdir -p /var/spool/cron
  chmod 755 /var/spool/cron
  ln -sf /usr/local/crontabs /var/spool/cron/crontabs

	if [ ! -d /usr/local/etc/config ] ; then
                mkdir -p /usr/local/etc/config
        	chmod 775 /usr/local/etc/config
        fi


        if [ ! -e /etc/config/TZ ] ; then
                cp $CFG_TEMPLATE_DIR/TZ /etc/config
        fi

        # update /etc/config/localtime and /etc/config/timezone
        /bin/updateTZ.sh

        # if /etc/config/timezone is set to Europe/Berlin we
        # assume a german keyboard layout
        if [[ $(cat /etc/config/timezone) == "Europe/Berlin" ]]; then
          /sbin/loadkmap </etc/de.kmap
        fi

        if [ ! -e /etc/config/netconfig ] ; then
                cp $CFG_TEMPLATE_DIR/netconfig /etc/config
        fi
        if [ ! -s /etc/config/shadow ] ; then
                cp $CFG_TEMPLATE_DIR/shadow /etc/config
        fi

  # copy the NUT config files in place in
  # case they don't exist yet
  if [ ! -e /etc/config/nut ] ; then
    cp -Rp ${CFG_TEMPLATE_DIR}/nut /etc/config/
  fi

  # copy the SNMP config files in place in
  # case they don't exist yet
  if [ ! -e /etc/config/snmp ] ; then
    cp -Rp ${CFG_TEMPLATE_DIR}/snmp /etc/config/
  fi

	# cal local postinit file
        if [ ! -e /etc/config/safemode ] ; then
		if [ -x /usr/local/etc/rc.postinit ]; then
			/usr/local/etc/rc.postinit
		fi
	fi
 
}

cleanup() {
  save_urandom
}

start() {
	echo -n "eQ-3 System start: "
	init
	echo "OK"
	echo -n "Starting crond: "
	start-stop-daemon -S -q -b -m -p /var/run/crond.pid --exec /usr/sbin/crond -- -f
	echo "OK"
}

stop () {
  echo -n "Stopping crond: "
	start-stop-daemon -K -q -p /var/run/crond.pid
  echo "OK"
  echo -n "eQ-3 System stop: "
  cleanup
  echo "OK"

  # check if we should install an addon
  if [[ -r /usr/local/.doAddonInstall ]]; then
    /bin/install_addon
    rm -f /usr/local/.doAddonInstall
  fi
}

restart() {
	start
}

case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  restart|reload)
	restart
	;;
  *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
esac

exit $?

