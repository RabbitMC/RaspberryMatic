--- homematic/WebUI/bin/hm_autoconf.orig
+++ homematic/WebUI/bin/hm_autoconf
@@ -74,6 +74,7 @@
     # Mapping of channel type to default function for the channel
     array set CHANNEL_FUNCTIONS {
         BLIND                   LIGHT
+        JALOUSIE                LIGHT
         DIMMER                  LIGHT
         VIRTUAL_DIMMER          LIGHT
         KEYMATIC                LOCK
@@ -545,61 +546,69 @@
         set FUNCTIONMAP([lindex $FUNCTIONLIST $i]) $function_id
         incr i 2
     }
-    
-    foreach ise_dev_id [array names devmap] {
-        set dev $devmap($ise_dev_id)
-        set dev_address [lindex $dev 0]
-        set if_id [lindex $dev 1]
-        array_clear channels
-        array set channels [lindex $dev 2]
-        set if_info $ifmap($if_id)
-        set url [lindex $if_info 0]
-        
-        array_clear dev_descr
-        array set dev_descr [xmlrpc $url getDeviceDescription $dev_address]
-        set procname "conf_device_$dev_descr(TYPE)"
-        if {[llength [info procs $procname]]} {
-            if [catch { $procname $url $ise_dev_id dev_descr } errMsg] {
-                puts "$procname $errMsg"
-            }
-        }
-        
-        foreach ise_ch_id [array names channels] {
-            set ch_address $channels($ise_ch_id)
-            array_clear ch_descr
-            array set ch_descr [xmlrpc $url getDeviceDescription $ch_address]
-            if [info exist DEVICE_FUNCTIONS($dev_descr(TYPE))] {
-                catch {
-                    rega "dom.GetObject($FUNCTIONMAP($DEVICE_FUNCTIONS($dev_descr(TYPE)))).Add($ise_ch_id)"
-                }
-            }
-            if [info exist CHANNEL_FUNCTIONS($ch_descr(TYPE))] {
-                catch {
-                    rega "dom.GetObject($FUNCTIONMAP($CHANNEL_FUNCTIONS($ch_descr(TYPE)))).Add($ise_ch_id)"
-                }
-            }
-            set procname "conf_channel_$ch_descr(TYPE)"
-            if {[llength [info procs $procname]]} {
-                if [catch { $procname $url $ise_ch_id ch_descr } errMsg] {
-                    puts "$procname $errMsg"
-                }
-            }
-            if {[llength [info procs "conf_value_$ch_descr(TYPE).*"]]} {
-                array_clear values_descr
-                array set values_descr [xmlrpc $url getParamsetDescription $ch_address "VALUES"]
-                foreach value [array names values_descr] {
-                    set procname "conf_value_$ch_descr(TYPE).$value"
-                    if {[llength [info procs $procname]]} {
-                        array set value_descr $values_descr($value)
-                        if [catch { $procname $url $ise_ch_id ch_descr value_descr } errMsg] {
-                            puts "$procname $errMsg"
-                        }
-                    }
-                }
-            }
-        }
-        rega "dom.GetObject($ise_dev_id).AddMetaData(\"AUTOCONF\");"
-    
+
+    # We need a catch because OSRAM Lightify causes an error (/tmp/hm_autoconf_xxx.log) because a list must have an even number of elements.
+    # set dev $devmap($ise_dev_id) produces something like that:
+    # OL-SurfaceTW 0 1008 { 19913 OL-SurfaceTW 0:0 19914 OL-SurfaceTW 0:1}
+    #
+    # It has to be like this:
+    # JEQ0067507 1007 { 1655 JEQ0067507:1}
+    catch {
+      foreach ise_dev_id [array names devmap] {
+          set dev $devmap($ise_dev_id)
+          set dev_address [lindex $dev 0]
+          set if_id [lindex $dev 1]
+          array_clear channels
+          array set channels [lindex $dev 2]
+          set if_info $ifmap($if_id)
+          set url [lindex $if_info 0]
+
+          array_clear dev_descr
+          array set dev_descr [xmlrpc $url getDeviceDescription $dev_address]
+          set procname "conf_device_$dev_descr(TYPE)"
+          if {[llength [info procs $procname]]} {
+              if [catch { $procname $url $ise_dev_id dev_descr } errMsg] {
+                  puts "$procname $errMsg"
+              }
+          }
+
+          foreach ise_ch_id [array names channels] {
+              set ch_address $channels($ise_ch_id)
+              array_clear ch_descr
+              array set ch_descr [xmlrpc $url getDeviceDescription $ch_address]
+              if [info exist DEVICE_FUNCTIONS($dev_descr(TYPE))] {
+                  catch {
+                      rega "dom.GetObject($FUNCTIONMAP($DEVICE_FUNCTIONS($dev_descr(TYPE)))).Add($ise_ch_id)"
+                  }
+              }
+              if [info exist CHANNEL_FUNCTIONS($ch_descr(TYPE))] {
+                  catch {
+                      rega "dom.GetObject($FUNCTIONMAP($CHANNEL_FUNCTIONS($ch_descr(TYPE)))).Add($ise_ch_id)"
+                  }
+              }
+              set procname "conf_channel_$ch_descr(TYPE)"
+              if {[llength [info procs $procname]]} {
+                  if [catch { $procname $url $ise_ch_id ch_descr } errMsg] {
+                      puts "$procname $errMsg"
+                  }
+              }
+              if {[llength [info procs "conf_value_$ch_descr(TYPE).*"]]} {
+                  array_clear values_descr
+                  array set values_descr [xmlrpc $url getParamsetDescription $ch_address "VALUES"]
+                  foreach value [array names values_descr] {
+                      set procname "conf_value_$ch_descr(TYPE).$value"
+                      if {[llength [info procs $procname]]} {
+                          array set value_descr $values_descr($value)
+                          if [catch { $procname $url $ise_ch_id ch_descr value_descr } errMsg] {
+                              puts "$procname $errMsg"
+                          }
+                      }
+                  }
+              }
+          }
+          rega "dom.GetObject($ise_dev_id).AddMetaData(\"AUTOCONF\");"
+
+      }
     }
 } errorMsg ]} {
     puts "Error: $errorMsg"
--- homematic/WebUI/www/config/ic_common.tcl.orig
+++ homematic/WebUI/www/config/ic_common.tcl
@@ -850,28 +850,31 @@
   if { (![info exist env(IC_OPTIONS)]) || ([string first NO_PROFILE_MAPPING $env(IC_OPTIONS)] < 0) } {
       # Verknuepfungen dem array map_link zuweisen
       read_links
-  
-      # Handelt es sich um ein Profil der Firmwareversion 1.4?
-      if {[info exists map_link($sender_address-$receiver_address)]} {
-        set new_profile_is_set "true"
-      }
-  
-      #1
 
-      # Wenn noch nicht geschehen, dann die Profile beim Wechsel von 
-      # Firmwareversionen < 1.4 auf die neue Profilstruktur in >= 1.4 mappen 
-      if {$cur_profile != "" && $new_profile_is_set == ""} then {
-      upvar PROFILE_$cur_profile PROFILE
-  
-        if {! [catch {set map_prn $PROFILE(UI_MAP)}]}  {
-          set cur_profile $map_prn
-          set mapped_profile $map_prn
-        #  puts "<p style=\"color:red; text-decoration:blink\">Mapped profile!<p>"
-        }  
+      catch {
+          # Handelt es sich um ein Profil der Firmwareversion 1.4?
+          if {[info exists map_link($sender_address-$receiver_address)]} {
+            set new_profile_is_set "true"
+          }
+
+
+        #1
+
+        # Wenn noch nicht geschehen, dann die Profile beim Wechsel von
+        # Firmwareversionen < 1.4 auf die neue Profilstruktur in >= 1.4 mappen
+        if {$cur_profile != "" && $new_profile_is_set == ""} then {
+        upvar PROFILE_$cur_profile PROFILE
+
+          if {! [catch {set map_prn $PROFILE(UI_MAP)}]}  {
+            set cur_profile $map_prn
+            set mapped_profile $map_prn
+          #  puts "<p style=\"color:red; text-decoration:blink\">Mapped profile!<p>"
+          }
+        }
+
+        if {$mapped_profile != "unset"} {set cur_profile $mapped_profile}
+        # end mapping....
       }
-  
-      if {$mapped_profile != "unset"} {set cur_profile $mapped_profile}
-      # end mapping.... 
   }
 
   if {$cur_profile != ""} then {
@@ -1067,9 +1070,14 @@
   #Evtl. irgendwann umbauen.
   global iface_url
   set channel_type ""
+  set chn ""
+
+  set hmDisEPIdentifier "HM-Dis-EP-WM55"
+  set hmDisWM55Identifier "HM-Dis-WM55"
 
   if { ! [catch { array set ch_descr [xmlrpc $iface_url($iface) getDeviceDescription [list string $address]] } ] } then {
     set channel_type $ch_descr(TYPE)
+    catch {set chn $ch_descr(INDEX)}
     set parent_type ""
     catch {set parent_type $ch_descr(PARENT_TYPE)}
   }
@@ -1106,6 +1114,10 @@
 
     if {[info exists unit] == 0} {
      set unit ""
+    } else {
+      if {($unit == "??C") || ($unit == "Â°C")} {
+        set unit "&#176;C"
+      }
     }
 
     # omit internal and invisible parameters
@@ -1123,7 +1135,14 @@
     if {$ps_type == "MASTER" && $parent_type == "" } then {
       append s "<td><span class=\"stringtable_value\">${param_id}</span></td>"
     } elseif {$ps_type == "MASTER" || $ps_type == "VALUES"} then {
-      append s "<td><span class=\"stringtable_value\">$channel_type|${param_id}</span></td>"
+      # We have to rename the translation of the parameters for the channels >=4 of the HM-Dis-EP-WM55 (Text Zeile x > Text Block x)
+      if {($parent_type != $hmDisEPIdentifier) || ($chn < 4)} {
+        # original translation
+        append s "<td><span class=\"stringtable_value\">$channel_type|${param_id}</span></td>"
+      } else {
+        # new translation
+        append s "<td><span>\${lblTextBlock}</span></td>"
+      }
     } else {
 
       # Nötig, zum übersetzen der Parameter auf der Senderseite (wie PEER_NEEDS_BURST, oder EXPECT_AES)
@@ -1149,17 +1168,40 @@
         } else {
           puts "<script type=\"text/javascript\">load_JSFunc('/config/easymodes/MASTER_LANG/KEY_4Dis.js');</script>"
           set helpText [getStatusDisplayHelp]
-          array set dev_descr [xmlrpc $url getDeviceDescription [list string $address]]
-          set chn $dev_descr(INDEX)
-          if {$param_id == "TEXTLINE_1"} {
-            # Fortlaufende Nummerierung der Textblöcke hinzufügen.
-            # Berechnung:
-            # 1. Parameter = Kanalnummer * 2 - 1
-            append s "<td>[expr $chn * 2 - 1]&nbsp;&nbsp;<input type=\"text\" name=\"$param_id\" onblur=\"encodeStringStatusDisplay('$idval', true);\" value=\"$value\" $id $access /></td>"
+
+          # The parameter numbering of the channels 1 and 2 are the same as from the HM-Dis-WM55
+          if {($parent_type != $hmDisEPIdentifier) || ($chn < 4)} {
+            if {$param_id == "TEXTLINE_1"} {
+              # Fortlaufende Nummerierung der Textblöcke hinzufügen.
+              # Berechnung:
+              # 1. Parameter = Kanalnummer * 2 - 1
+              if {($parent_type != $hmDisEPIdentifier) && ($parent_type != $hmDisWM55Identifier)} {
+                append s "<td>[expr $chn * 2 - 1]&nbsp;&nbsp;<input type=\"text\" name=\"$param_id\" maxlength=\"12\" onblur=\"encodeStringStatusDisplay('$idval', true);\" value=\"$value\" $id $access /></td>"
+              } else {
+                append s "<td>[expr $chn * 2 - 1]&nbsp;&nbsp;<input type=\"text\" name=\"$param_id\" maxlength=\"12\" onblur=\"encodeStringStatusDisplay('$idval', true, '_');\" value=\"$value\" $id $access /></td>"
+              }
+            } else {
+              # 2. Parameter = Kanalnummer * 2
+              if {($parent_type != $hmDisEPIdentifier) && ($parent_type != $hmDisWM55Identifier)} {
+                append s "<td>[expr $chn * 2]&nbsp;&nbsp;<input type=\"text\" name=\"$param_id\" maxlength=\"12\" onblur=\"encodeStringStatusDisplay('$idval', true);\" value=\"$value\" $id $access /></td>"
+              } else {
+                append s "<td>[expr $chn * 2]&nbsp;&nbsp;<input type=\"text\" name=\"$param_id\" maxlength=\"12\" onblur=\"encodeStringStatusDisplay('$idval', true, '_');\" value=\"$value\" $id $access /></td>"
+              }
+
+              append s "<td><img src=\"/ise/img/help.png\"/ size=\"24\" width=\"24\" onclick=\"MessageBox.show(translateKey('dialogHelpTitle'), '$helpText', '', 450, 375) ;\"></td>"
+            }
           } else {
-            # 2. Parameter = Kanalnummer * 2
-            append s "<td>[expr $chn * 2]&nbsp;&nbsp;<input type=\"text\" name=\"$param_id\" value=\"$value\" $id $access /></td>"
-            append s "<td><img src=\"/ise/img/help.png\"/ size=\"24\" width=\"24\" onclick=\"MessageBox.show(translateKey('dialogHelpTitle'), '$helpText', '', 450, 320) ;\"></td>"
+            # Here we set the parameter numbering for the channels 4 - 8 of the HM-Dis-EP-WM55
+            if {$param_id == "TEXTLINE_1"} {
+              # Fortlaufende Nummerierung der Textblöcke hinzufügen.
+              # Berechnung:
+              # 1. Parameter = Kanalnummer * 2 - 7
+              append s "<td>[expr $chn * 2 - 7]&nbsp;&nbsp;<input type=\"text\" name=\"$param_id\" maxlength=\"12\" onblur=\"encodeStringStatusDisplay('$idval', true, '_');\" value=\"$value\" $id $access /></td>"
+            } else {
+              # 2. Parameter = Kanalnummer * 2 -6
+              append s "<td>[expr $chn * 2 - 6]&nbsp;&nbsp;<input type=\"text\" name=\"$param_id\" maxlength=\"12\" onblur=\"encodeStringStatusDisplay('$idval', true, '_');\" value=\"$value\" $id $access /></td>"
+              append s "<td><img src=\"/ise/img/help.png\"/ size=\"24\" width=\"24\" onclick=\"MessageBox.show(translateKey('dialogHelpTitle'), '$helpText', '', 450, 375) ;\"></td>"
+            }
           }
         }
         append s "<td>$unit</td>"
@@ -1249,7 +1291,7 @@
           append s "<input type=\"hidden\" name=\"$param_id\"   value=\"$value_orig\" $id                 $access style=\"visibility:hidden;display:none;\" />"
           append s "<input type=\"text\"   name=\"__$param_id\" value=\"$value\"       id=\"$input_idval\" $access $hidden"
           append s "  onkeyup=\"ProofAndSetValue('$input_idval', '${idval}', parseInt($min), parseInt($max), parseFloat([expr 1 / $factor]));\" /></td>"
-          append s "<td><div id=\"${input_idval}_unit\" $hidden class=\"stringtable_value\">$unit ($min-$max)</div></td>"
+          append s "<td><div id=\"${input_idval}_unit\" $hidden class=\"_stringtable_value\">$unit ($min-$max)</div></td>"
       }
       "FLOAT" {
         set input_idval   ${idval}_temp
@@ -1691,7 +1733,9 @@
   upvar $ps_arr ps
   set pname $name 
   set s ""
-  set value $ps($pname)
+  # change because of HmIP
+  # set value $ps($pname)
+  set value [lindex $ps($pname) 0]
 
   if {[string first "." $value] >= 0} then {
     set value [format "%.1f" $value]
@@ -1866,7 +1910,7 @@
   if {$paramids != ""} then {
     foreach filename $paramids {
 
-      if { [file exists easymodes/$filename.tcl] } then {
+      if { [file exists easymodes/$filename.tcl] || [file exists easymodes/hmip/$filename.tcl] } then {
         set paramid $filename
         break
       }
--- homematic/WebUI/www/config/st_values.cgi.orig
+++ homematic/WebUI/www/config/st_values.cgi
@@ -0,0 +1,75 @@
+#!/bin/tclsh
+source ../cgi.tcl
+
+set ST_FILENAME "$env(DOCUMENT_ROOT)/config/stringtable_de.txt"
+set JS_FILENAME "$env(DOCUMENT_ROOT)/config/st_values.js"
+	
+proc put_js_functions {} {
+
+	global JS_FILENAME
+	
+	if { ! [catch {open $JS_FILENAME "r"} jsfile] } then {
+
+		while {! [eof $jsfile] } {
+			gets $jsfile zeile
+
+			#Weiche EOF-Marke:
+			if {$zeile == "//<."} then { break }
+			
+			puts $zeile
+		}
+
+		catch {close $jsfile}
+	}
+}
+
+proc parse_line {zeile p_context p_value} {
+
+	upvar $p_context context
+	upvar $p_value   value
+	
+	set tokenizer [split $zeile "\t"]
+	
+	set context [lindex $tokenizer 0]
+	set value   [lindex $tokenizer 1]
+}
+
+proc parse_file {} {
+
+	global ST_FILENAME
+	
+	if { ! [catch {open $ST_FILENAME "r"} stFile] } then {
+
+		puts "elvST = new Array();"
+		
+		while {! [eof $stFile] } {
+			gets $stFile zeile
+
+			if {$zeile == ""} then {
+				continue
+			}
+
+      		if { [regexp {^([^\t]*)\t+(.*)$} $zeile dummy key value] } then {
+	      		if { [regexp {^<.*>$} $value] } then {
+					#Dieser Parameter wurde noch nicht übersetzt. Nicht ins JavaScript-Array einfü!
+					continue
+				}
+			}
+
+			set context ""
+			set value ""
+			
+			parse_line $zeile context value
+			
+			puts "elvST\['$context'\] = '$value';"
+		}
+		
+    	catch {close $stfile}
+	}
+}
+
+cgi_http_head {
+  cgi_content_type "text/javascript; charset=iso-8859-1"
+}
+parse_file
+put_js_functions
--- homematic/WebUI/www/config/st_values.js.orig
+++ homematic/WebUI/www/config/st_values.js
@@ -0,0 +1,138 @@
+/*
+Ãbersetzt den Inhalt der HTML-Elemente <span class="stringtable_value">...</span>
+und <select class="stringtable_select">...</select>
+*/
+st_setStringTableValues = function()
+{
+	var translation;
+	
+	//In <span class="stringtable_value">...</span> eingeschlossene WÃ¶rter Ã¼bersetzen
+	var temp = document.getElementsByClassName('stringtable_value');
+  
+    var wrappers = new Array();
+	for (var i=0; i<temp.length; i++)
+	{	
+		wrappers[i]=temp[i];
+	}
+    
+	for (var i=0; i<wrappers.length; i++)
+	{	
+		wrappers[i].innerHTML = st_getValue( wrappers[i].innerHTML ).escapeHTML();
+		wrappers[i].className += "_translated";
+	}
+	//-------------------------------------------------------------------------
+
+	//Comboboxen Ã¼bersetzen <select class="stringtable_select" ... >...</select>
+	var temp = document.getElementsByClassName('stringtable_select');
+
+	var selboxes = new Array();
+	for (var i = 0, len = temp.length; i < len; i++)
+	{
+		selboxes[i] = temp[i];
+	}
+	
+	for (var i=0; i<selboxes.length; i++)
+	{
+		var selectelem = selboxes[i];
+
+		if (selectelem.type != "select-one") continue;
+		
+		for (var k=0; k<selectelem.options.length; k++)
+		{
+			selectelem.options[k].text = st_getValue(selectelem.options[k].text).escapeHTML();
+		}
+
+		selectelem.className += "_translated";
+	}
+	//-------------------------------------------------------------------------
+	
+	//Input-Felder Ã¼bersetzen <input class="stringtable_input" ...> 
+	var temp = document.getElementsByClassName('stringtable_input');
+
+	var input = new Array();
+	for (var i = 0, len = temp.length; i < len; i++)
+	{
+		input[i] = temp[i];
+	}
+
+	for (var i = 0; i < input.length; i ++)
+	{
+		input[i].value = st_getValue(input[i].value).escapeHTML();
+		input[i].className += "_translated";
+	}
+
+};
+
+//Eingabeparameter
+//context: <channeltype>|<value_id>(=<value>)?
+//context: <channeltype>|<value_id>
+//context: <value_id>
+//RÃ¼ckgabeparameter:
+//return: Ã¼bersetzung, wenn context gefunden in den Spezialisierungsgraden:
+//	1. <channeltype>|<value_id>(=<value>)?
+//	2. <channeltype>|<value_id>
+//	3. <value_id>
+//	sonst: value, wenn value aus dem context extrahiert werden kann
+//	sonst: context wird wieder zurÃ¼ckgegeben.
+st_getValue = function(context)
+{
+	var translation;
+	var tokens;
+	var channel_type;
+	var value_id_assign; //Inhalt: <value_id>=<value>
+	var value_id;
+	var value;
+		
+	//Voller context vorhanden?=========================================
+	translation = elvST[context];
+
+	if (translation && translation != "") return translation;
+	//==================================================================
+	
+	//Gibt es einen Eintrag nur mit value_id_assign?====================
+	tokens = context.split('|');
+	value_id_assign = "";
+	
+	if (tokens.length > 1)
+	{
+		//channel_type = tokens[0];
+		value_id_assign = tokens[1];
+		translation = elvST[ value_id_assign ];
+		if (translation && translation != "") return translation;
+	}
+	//==================================================================
+
+	//Gibt es einen Eintrag nur mit dem Variablennamen?=================
+	tokens = context.split('=');
+	value = "";
+	
+	if (tokens.length > 1)
+	{
+		//value_id = tokens[0];
+		value = tokens[1];
+		translation = elvST[ value ];
+		if      (translation && translation != "") return translation;
+		else if (value       && value       != "") return value;
+	}
+	//==================================================================
+	
+	//Gibt es einen Eintrag im INPUT-Feld?==============================
+
+	tokens = context.split(" ");
+	translation = "";
+
+	for (var i = 0; i < tokens.length; i++)
+	{
+		if (typeof elvST[tokens[i]] != 'undefined') 
+		{
+			tokens[i] = elvST[tokens[i]];
+		}
+		translation += tokens[i] + " ";
+	}
+	if (translation && translation != "") return translation;
+	//==================================================================
+
+	if (value_id_assign && value_id_assign != "") return value_id_assign;
+	else                                          return context;
+};
+//<.
